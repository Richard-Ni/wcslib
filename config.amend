#-----------------------------------------------------------------------------
# Process this file with autoconf-2.53 or later to produce a configure script.
#-----------------------------------------------------------------------------
# Author: Mark Calabretta, Australia Telescope National Facility, CSIRO.
# http://www.atnf.csiro.au/people/Mark.Calabretta
# $Id: configure.ac,v 8.3 2024/05/13 16:33:01 mcalabre Exp $
#-----------------------------------------------------------------------------

AC_INIT([WCSLIB],[8.3],[mark@calabretta.id.au],[wcslib-8.3])
AC_PREREQ([2.71])
AC_REVISION([$Revision: 8.3 $])
AC_SUBST([PACKAGE_VERSION])
AC_DEFINE_UNQUOTED([WCSLIB_VERSION], [$PACKAGE_VERSION], [Define wcslib version])

# Library version number, same as package version.
LIBVER="$PACKAGE_VERSION"
AC_SUBST([LIBVER])

AC_CONFIG_SRCDIR([C/wcs.h])
AC_CONFIG_AUX_DIR([config])

# Get the system type.
AC_CANONICAL_SYSTEM
ARCH="${host_cpu}-$host_os"
AC_SUBST([ARCH])

# Set cross-compile tools
AC_CHECK_TOOL([CC], [gcc])
AC_CHECK_TOOL([CXX], [g++])
AC_CHECK_TOOL([LD], [ld])
AC_CHECK_TOOL([AR], [ar])
AC_CHECK_TOOL([RANLIB], [ranlib])

# Check if we are cross-compiling
AC_MSG_CHECKING([whether we are cross compiling])
if test "$cross_compiling" = "yes"; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi

# Look for Flex.
AC_ARG_ENABLE([flex], [AS_HELP_STRING([--disable-flex],
            [don't apply flex (use pre-generated sources)])], [])
if test "x$enable_flex" = xno ; then
  FLEX=
  AC_MSG_WARN([Generation of flex sources disabled by request, using
           pre-generated sources.])

else
  AC_CHECK_PROG([FLEX], [flex], [flex], [], [], [])
  if test "x$FLEX" = xflex ; then
    # Version 2.6.0 or later is required.
    V=`flex --version | awk '{print $2}'`
    W=`echo $V | awk -F. '{if ((($1*100 + $2)*100 + $3) < 20600) print "no"}'`
    if test "x$W" != x ; then
      AC_MSG_WARN([Flex version $V is too old, ignored.])
      FLEX=
    else
      AC_MSG_NOTICE([Using Flex version $V.])
    fi
  fi

  if test "x$FLEX" = x ; then
    AC_MSG_WARN([Flex version 2.6.0 or later does not appear to be
           available, will use pre-generated sources.])
  fi
fi


# Look for an ANSI C compiler.
AC_PROG_CPP
AC_PROG_CC
if test "x$ac_cv_c_compiler_gnu" = xyes ; then
  # Get gcc version number.
  GCC_VERSION=`$CC -dumpfullversion`
  AC_MSG_NOTICE([Using gcc version $GCC_VERSION])
else
  GCC_VERSION=
fi
AC_SUBST([GCC_VERSION])

AC_C_CONST
AC_TYPE_SIZE_T
if test "x$ac_cv_prog_cc_stdc" = xno -o \
        "x$ac_cv_c_const"      = xno -o \
        "x$ac_cv_type_size_t"  = xno; then
  AC_MSG_ERROR([
    -------------------------------------------------------
    An ANSI standard C library is required to build WCSLIB.

    ERROR: WCSLIB configuration failure.
    -------------------------------------------------------], [1])
fi

# Check for data types (suggested by autoscan - off_t is only required by
# fitshdr).
AC_TYPE_OFF_T
AC_TYPE_INT8_T
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_UINT8_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T

AC_CHECK_HEADERS([ctype.h errno.h limits.h locale.h math.h setjmp.h stdarg.h \
                  stdio.h stdlib.h string.h])
if test "x$ac_cv_header_stdc" = xno; then
  AC_MSG_ERROR([
    -------------------------------------------------------------------
    An ANSI standard C library is required to build WCSLIB.  One of the
    ANSI C header files it requires is missing or unusable.

    ERROR: WCSLIB configuration failure.
    -------------------------------------------------------------------], [1])
fi

# Flex uses fileno() and other POSIX features whose prototypes are only
# available from glibc's stdio.h with an appropriate preprocessor macro
# definition.  This cannot be set within the flex description file itself
# as stdio.h is included in the generated C code before any part of the
# description.  See fileno(3) and feature_test_macros(7).
if test "x$ac_cv_c_compiler_gnu" = xyes ; then
  FLFLAGS="$FLFLAGS -D_POSIX_C_SOURCE=1"
fi
AC_SUBST([FLFLAGS])

# Checks for ANSI C library functions (suggested by autoscan - fseeko and
# stat are only required by fitshdr).
AC_CHECK_LIB([m], [floor])
AC_FUNC_FSEEKO
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_STAT
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([floor memset pow setlocale sqrt strchr strstr])

# System libraries that may be required by WCSLIB itself.
# SunOS, extra maths functions.
AC_CHECK_LIB([sunmath], [cosd], [LIBS="-lsunmath $LIBS"], [], [])

# See if we can find sincos().
AC_CHECK_FUNCS([sincos])

# Check the size and availability of integer data types.
AC_CHECK_SIZEOF([int])
AC_CHECK_SIZEOF([long int])
AC_CHECK_SIZEOF([long long int])

# 64-bit integer data type; use long long int preferentially since that
# accords with "%lld" formatting used in fitshdr.l, e.g.
#                int   size_t  long int  long long int
#                ---   ------  --------  -------------
#   gcc x86:      32     32       32          64
#   gcc x86_64:   32     64       64          64
if test "x$ac_cv_sizeof_long_long_int" = x8; then
  AC_DEFINE([WCSLIB_INT64], [long long int], [64-bit integer data type.])
elif test "x$ac_cv_sizeof_long_int" = x8; then
  AC_DEFINE([WCSLIB_INT64], [long int], [64-bit integer data type.])
elif test "x$ac_cv_sizeof_int" = x8; then
  AC_DEFINE([WCSLIB_INT64], [int], [64-bit integer data type.])
fi

# Does printf() have the z modifier for size_t type?  Important for 64-bit.
AC_MSG_CHECKING([for printf z format modifier for size_t type])
AC_RUN_IFELSE(
  [AC_LANG_PROGRAM([AC_INCLUDES_DEFAULT],
                   [[char buf[64];
                     if (sprintf(buf, "%zu", (size_t)1) != 1)
                       return 1;
                     else if (strcmp(buf, "1"))
                       return 2;]])],
  AC_DEFINE([MODZ], ["z"], [printf format modifier for size_t type.])
    AC_MSG_RESULT(yes),
  AC_DEFINE([MODZ], [""],  [printf format modifier for size_t type.])
    AC_MSG_RESULT(no),
  AC_DEFINE([MODZ], [""],  [printf format modifier for size_t type.])
    AC_MSG_RESULT(assumed not)
)

# The rest of the script remains the same...
